apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "config-server.fullname" . }}
  labels:
{{ include "config-server.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "config-server.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        app.kubernetes.io/name: {{ include "config-server.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "config-server.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: TZ
              value: "Asia/Shanghai"
            - name: JAVA_OPTS
              value: "{{ .Values.env.JAVA_OPTS }}"
            - name: APP_OPTS
              value: "
               --registerWithEureka={{ .Values.env.APP_OPTS.registerWithEureka }}
               --eureka.instance.preferIpAddress={{ .Values.env.APP_OPTS.preferIpAddress }}
               --eureka.client.serviceUrl.defaultZone={{ .Values.env.APP_OPTS.eurekaAddress }}
               "
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          volumeMounts:
            - name: {{ template "config-server.fullname" . }}-bootstrap
              mountPath: /config/bootstrap.properties
              subPath: bootstrap.properties
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 20    #延迟加载时间
            periodSeconds: 5           #重试时间间隔
            timeoutSeconds: 10         #超时时间设置
            failureThreshold: 5        #探测失败的重试次数
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 20    #延迟加载时间
            periodSeconds: 5           #重试时间间隔
            timeoutSeconds: 10         #超时时间设置
            failureThreshold: 5        #探测失败的重试次数
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - name: {{ template "config-server.fullname" . }}-bootstrap
          configMap:
            name: {{ template "config-server.fullname" . }}-bootstrap
