apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "gogs.fullname" . }}
     {{- with .Values.image.annotations }}
  annotations:
{{ toYaml . | indent 8 }}
  {{- end }}
  labels:
    app.kubernetes.io/name: {{ include "gogs.name" . }}
    helm.sh/chart: {{ include "gogs.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "gogs.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  serviceName: {{ template "gogs.fullname" . }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/sqlite: {{ include (print $.Template.BasePath "/configmap-sqlite.yaml") . | sha256sum }}
      labels:
        app.kubernetes.io/name: {{ include "gogs.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: TZ
              value: "Asia/Shanghai"
            - name: SOCAT_LINK
              value: "false"
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: ssh
              containerPort: 22
              protocol: TCP
          volumeMounts:
            - name: gogs-config
              mountPath: /data/gogs/conf/app.ini
              subPath: app.ini
            - name: gogs-data
              mountPath: /data
          securityContext:
            privileged: true
          resources:
{{ toYaml .Values.resources | indent 12 }}
      initContainers:
        - image: pi4k8s/sqlite3:3.22.0-ubuntu-18-04
          command:
            - sh
            - -c
            - |
              if [ ! -e /data/gogs/{{ $.Values.config.database.path }} ]; then
                mkdir -p /data/gogs/data
                sqlite3 /data/gogs/{{ $.Values.config.database.path }} </data/gogs.sql
              fi
          imagePullPolicy: Always
          name: sqlite3
          volumeMounts:
            - name: gogs-sqlite
              mountPath: /data/gogs.sql
              subPath: gogs.sql
            - name: gogs-data
              mountPath: /data
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
        - name: gogs-sqlite
          configMap:
            name: {{ template "gogs.fullname" $ }}-sqlite
        - name: gogs-config
          configMap:
            name: {{ template "gogs.fullname" $ }}-config
{{- if not .Values.persistence.enabled }}
      volumes:
        - name: gogs-data
          emptyDir: {}
{{- end }}
{{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: gogs-data
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
             {{- if .Values.persistence.storageClass }}
              {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
              {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
              {{- end }}
             {{- end }}
{{- end }}
